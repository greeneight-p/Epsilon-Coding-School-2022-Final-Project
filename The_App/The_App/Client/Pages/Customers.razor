@page "/customers"
@using The_App.Shared
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime



<h3>Customers</h3>
@*<button class="btn btn-info btn-lg btn-block" @onclick="AddTest" type="button">Login</button>


<h3>Create A Customer</h3>
<EditForm class="mb-4" Model="@_customerViewModel">
    <input @bind=_customerViewModel.Name placeholder="Name" />
    <input @bind=_customerViewModel.Surname placeholder="Surname" />
    <button class="btn btn-primary" @onclick="AddCustomer">Add Car</button>
</EditForm>
*@


@if (!_loaded) {
    <p>Loading ...</p>
}
else {
    <EditForm class="mb-4" Model="@_customerViewModel">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Card Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @if (activeCustomers) {
             <tr>
                <td><input @bind=_customerViewModel.Name placeholder="Name" /></td>
                <td><input @bind=_customerViewModel.Surname placeholder="Surname"/></td>
                <td><input hidden="true" @bind="_customerViewModel.Surname" placeholder="Surname"/></td>
                <td><button class="btn btn-primary" @onclick="AddCustomer">Add Customer</button></td>
            </tr>
                @foreach (var customer in _customerList.Where(x => x.Status == activeCustomers)) {
                    <tr>
                        <td><input @bind="customer.Name" /></td>
                        <td><input @bind="customer.Surname" /></td>
                        <td><input @bind="customer.CardNumber" /></td>
                        <td>
                            <button class="btn btn-success" @onclick="() => NewCardNumber(customer)">New Card</button>
                            <button class="btn btn-success" @onclick="() => SaveCustomer(customer)">Save</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Delete</button>
                        </td>
                    </tr>
                }
                <button class="btn btn-warning mt-5" @onclick="ReverseActiveCustomers">Show Deleted Customers</button>

            }
            else {
                @foreach (var customer in _customerList.Where(x => x.Status == activeCustomers)) {
                    <tr>
                        <td><input readonly @bind="customer.Name" /></td>
                        <td><input readonly @bind="customer.Surname" /></td>
                        <td><input readonly @bind="customer.CardNumber" /></td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Undo</button>
                        </td>
                    </tr>
                }
                <button class="btn btn-warning mt-5" @onclick="ReverseActiveCustomers">Back</button>
            }
        </tbody>
    </table>
    </EditForm>
}



@code {
    public bool activeCustomers = true;
    private bool _loaded = false;
    List<CustomerViewModel> _customerList = new();
    private CustomerViewModel _customerViewModel = new();

    protected override async Task OnInitializedAsync() {
        await LoadCustomersFromServer();
        _loaded = true;
    }

    private async Task LoadCustomersFromServer() {
        _customerList = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("customers/getall");
    }

    public async void AddTest() {
        var model = new CustomerViewModel()
            {
                Name = "john",
                Surname = "Pol"
            };

        var response = await httpClient.PostAsJsonAsync<CustomerViewModel>("customers", model);
    }
    async Task AddCustomer() {
        if (string.IsNullOrWhiteSpace(_customerViewModel.Name)) return;
        if (string.IsNullOrWhiteSpace(_customerViewModel.Surname)) return;
        await httpClient.PostAsJsonAsync("customers", _customerViewModel);
        _customerViewModel.Name = null;
        _customerViewModel.Surname = null;
        await LoadCustomersFromServer();
    }
    async Task DeleteCustomer(CustomerViewModel customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customers/{customer.ID}");
            response.EnsureSuccessStatusCode();
            await LoadCustomersFromServer();
        }
    }
    async Task NewCardNumber(CustomerViewModel customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm) {
            customer.NewCardNumber = true;
        }
    }
    async Task SaveCustomer(CustomerViewModel customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm) {
            var response = await httpClient.PutAsJsonAsync("customers", customer);
            response.EnsureSuccessStatusCode();
            await LoadCustomersFromServer();
        }
    }

        async Task ReverseActiveCustomers() {
        activeCustomers = !activeCustomers;
    }


}
