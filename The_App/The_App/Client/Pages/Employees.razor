@page "/employees"
@using The_App.Shared
@using static FuelStation.Models.Enumerations
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime



<h3>Employees</h3>



@if (!_loaded) {
    <p>Loading ...</p>
}
else{
    
     @if (activeEmployeess) {  
       <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Surname</th>
                            <th>Type</th>
                            <th>Monthly Sallary</th>
                            <th>Hire Date</th>
@*                            <th>Dismiss Date</th>*@
                            <th></th>
                        </tr>
                    </thead>
                 <tbody>   
            <tr>
                <td><input  @bind=_employeeViewModel.Name placeholder="Name" /></td> 
                <td><input @bind=_employeeViewModel.Surname placeholder="Surname" /> </td> 
                <td><EditForm Model="@_employeeViewModel" class="mb-4">
                        <InputSelect @bind-Value="_employeeViewModel.EmployeeType" style="height: 30px;">
                                    @foreach (var type in Enum.GetValues(typeof(EmployeeType))) {
                                    <option value="@type">@type</option>
                                }
                        </InputSelect>
                    </EditForm> </td>                  
                <td>  <input type="number" min="0" step="0.01" @bind="_employeeViewModel.SalaryPerMonth" placeholder="Cost"/> </td> 
                <td>   <input  @bind="_employeeViewModel.HireDate" hidden/> </td> 
@*                <td>   <input  @bind="_employeeViewModel.DismissDate" hidden/> </td> *@
                <td>   <button class="btn btn-primary" @onclick="AddEmployee">Add Employee</button> </td> 
            </tr>
                @foreach (var employee in _employeeList.Where(x => x.Status == activeEmployeess)) {
                    <tr>
                        <td><input  @bind=employee.Name placeholder="Name" /></td> 
                        <td><input @bind=employee.Surname placeholder="Surname" /> </td> 
                        <td><EditForm Model="@employee" class="mb-4">
                                <InputSelect @bind-Value="employee.EmployeeType" style="height: 30px;">
                                            @foreach (var type in Enum.GetValues(typeof(EmployeeType))) {
                                            <option value="@type">@type</option>
                                        }
                                </InputSelect>
                            </EditForm> </td>                  
                        <td><input type="number" min="0" step="0.01" @bind="employee.SalaryPerMonth" placeholder="Salary"/> </td> 
                        <td><input  @bind="employee.HireDate" readonly/> </td>
@*                         @if (employee.DismissDate == DateTime.MinValue) {
                            <td><input  @bind="employee.DismissDate" hidden/> </td>
                         }
                        else {
                            <td><input  @bind="employee.DismissDate" readonly/> </td>
                        }*@
                        <td>
                            <button class="btn btn-success" @onclick="() => SaveEmployee(employee)">Save</button>
                            <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Dismiss</button>
                        </td>
                    </tr>
                     }
                 </tbody>
                 </table> 
               
                <button class="btn btn-warning mt-5" @onclick="ReverseActiveEmployees">Show Dismissed Employees</button>
         
       
           }
             else {
           <table class="table table-striped table-hover">
            <thead>
                    <tr>
                        <th>Name</th>
                        <th>Surname</th>
                        <th>Type</th>
                        <th>Monthly Sallary</th>
                        <th>Hire Date</th>
                        <th>Dismiss Date</th>
                        <th></th>
                    </tr>
                </thead>
            <tbody> 
                @foreach (var employee in _employeeList.Where(x => x.Status == activeEmployeess)) {
                    <tr>
                        <td><input  @bind=employee.Name placeholder="Name" /></td> 
                        <td><input @bind=employee.Surname placeholder="Surname" /> </td> 
                        <td><EditForm Model="@employee" class="mb-4">
                                <InputSelect @bind-Value="employee.EmployeeType" style="height: 30px;">
                                            @foreach (var type in Enum.GetValues(typeof(EmployeeType))) {
                                            <option value="@type">@type</option>
                                        }
                                </InputSelect>
                            </EditForm> </td>                  
                        <td><input type="number" step="0.01" @bind="employee.SalaryPerMonth" placeholder="Salary"/> </td> 
                        <td><input  @bind="employee.HireDate" readonly/> </td> 
                        @if (employee.DismissDate == DateTime.MinValue) {
                            <td><input  @bind="employee.DismissDate" hidden/> </td>
                        }
                        else {
                            <td><input  @bind="employee.DismissDate" readonly/> </td>
                        }
                        <td> <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Undo</button></td>
                    </tr>
                }
                <button class="btn btn-warning mt-5" @onclick="ReverseActiveEmployees">Back</button>
              </tbody>
              </table>
            }            
}




@code {
    public bool activeEmployeess = true;
    private bool _loaded = false;
    List<EmployeeViewModel> _employeeList = new();
    private EmployeeViewModel _employeeViewModel = new();

    protected override async Task OnInitializedAsync() {
        await LoadEmployeesFromServer();
        _loaded = true;
    }

    private async Task LoadEmployeesFromServer() {
        _employeeList = await httpClient.GetFromJsonAsync<List<EmployeeViewModel>>("employees/getall");
    }

    async Task AddEmployee() {
        if (string.IsNullOrWhiteSpace(_employeeViewModel.Name) ||
            string.IsNullOrWhiteSpace(_employeeViewModel.Surname) ||
            _employeeViewModel.SalaryPerMonth <= 0)
            await jsRuntime.InvokeVoidAsync("InvalidInput");
        await httpClient.PostAsJsonAsync("employees", _employeeViewModel);
        _employeeViewModel.Name = null;
        _employeeViewModel.Surname = null;
        _employeeViewModel.SalaryPerMonth = 0;
        await LoadEmployeesFromServer();
    }
    async Task DeleteEmployee(EmployeeViewModel employee) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm) {
            var response = await httpClient.DeleteAsync($"employees/{employee.ID}");
            response.EnsureSuccessStatusCode();
            await LoadEmployeesFromServer();
        }
    }
    async Task SaveEmployee(EmployeeViewModel customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm) {
            var response = await httpClient.PutAsJsonAsync("employees", customer);
            response.EnsureSuccessStatusCode();
            await LoadEmployeesFromServer();
        }
    }

    async Task ReverseActiveEmployees() {
        activeEmployeess = !activeEmployeess;  
    }


}

