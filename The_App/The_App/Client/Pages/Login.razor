@page "/"
@using The_App.Client.Shared.Layouts
@using The_App.Shared
@*@page "/fetchdata"*@
@layout LoginLayout
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@using FuelStation.Models
@using static FuelStation.Models.Enumerations

<h3>Login</h3>
<section class="vh-100">
  <div class="container-fluid">
    <div class="row">
      <div class="col-sm-6 text-black">

        <div class="px-5 ms-xl-4">
          <i class="fas fa-crow fa-2x me-3 pt-5 mt-xl-4" style="color: #709085;"></i>
          <span class="h1 fw-bold mb-0">Logo</span>
        </div>

        <div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-5 pt-5 pt-xl-0 mt-xl-n5">
          <EditForm Model="@LoginViewModel" style="width: 23rem;">
            <h3 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Log in</h3>

             <div class="form-outline mb-4">
             <label class="form-label"  for="form2Example18">Username</label>
                <InputSelect @bind-Value="LoginViewModel.Type" id="form2Example18" class="form-control form-control-lg">
                            @foreach (var type in Enum.GetValues(typeof(EmployeeType))) {
                            <option value="@type">@type</option>
                        }
                </InputSelect>
             </div>

            <div class="form-outline mb-4">
              <input @bind="LoginViewModel.Password" type="password" id="form2Example28" class="form-control form-control-lg" />
              <label class="form-label" for="form2Example28">Password</label>
            </div>

            <div class="pt-1 mb-4">
              <button class="btn btn-info btn-lg btn-block" @onclick="LogIn"type="button">Login</button>
            </div>
        </EditForm>
@*            <p class="small mb-5 pb-lg-2"><a class="text-muted" href="#!">Forgot password?</a></p>
            <p>Don't have an account? <a href="#!" class="link-info">Register here</a></p>*@

        

        </div>

      </div>
      <div class="col-sm-6 px-0 d-none d-sm-block">
        <img src="/loginPagePhoto.jpg"
          alt="Login image" class="w-100 vh-100" style="object-fit: cover; object-position: left;">
      </div>
    </div>
  </div>
</section>


@code {

    [CascadingParameter] public App MyApp { get; set; }
    public int empType { get; set; }
    public int password { get; set; }
    public string username { get; set; }
    public LoginViewModel LoginViewModel { get; set; } = new();

    async void LogIn() {

        string output = new string(LoginViewModel.Password.ToCharArray().Reverse().ToArray());
        bool result = false;
        switch (LoginViewModel.Type) {
            case EmployeeType.Admin:
                result = await httpClient.GetFromJsonAsync<bool>($"authentications/login/{LoginViewModel.Type}/{output}");                
                if (result) {
                    MyApp.SetLayout(typeof(AdminLayout));
                    navManager.NavigateTo("/index");
                }
                break;
            case EmployeeType.Manager:
                result = await httpClient.GetFromJsonAsync<bool>($"authentications/login/{LoginViewModel.Type}/{output}");
                if (result) {
                    MyApp.SetLayout(typeof(ManagerLayout));
                    navManager.NavigateTo("/index");
                }
                break;
            case EmployeeType.Staff:
                result = await httpClient.GetFromJsonAsync<bool>($"authentications/login/{LoginViewModel.Type}/{output}");
                if (result) {
                    MyApp.SetLayout(typeof(StaffLayout));
                    navManager.NavigateTo("/index");
                }
                break;
            case EmployeeType.Cashier:
                result = await httpClient.GetFromJsonAsync<bool>($"authentications/login/{LoginViewModel.Type}/{output}");
                if (result) {
                   MyApp.SetLayout(typeof(CashierLayout));
                   navManager.NavigateTo("/index");
                }
                break;
            default:
                break;
        }



    }






}
